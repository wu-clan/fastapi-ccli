#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import re
from typing import Optional

import typer

app_zh = typer.Typer()


def orm_callback(orm: str) -> str:
    """
    ‰ΩøÁî®Âì™‰∏™ orm

    :param orm:
    :return:
    """
    if orm:
        if orm == 'sqlalchemy' or orm == 's':
            use_orm = typer.style('sqlalchemy', fg='green', bold=True)
        elif orm == 'tortoise-orm' or orm == 't':
            use_orm = typer.style('tortoise', fg='green', bold=True)
        else:
            raise typer.BadParameter("ËæìÂÖ•Êú™Áü•ÂèÇÊï∞ÔºåÂè™ÂÖÅËÆ∏ 'sqlalchemy' / 's' or 'tortoise-orm' / 't'")
    else:
        use_orm = typer.style('sqlalchemy', fg='green', bold=True)
    return use_orm


def project_path_callback(project_path: str) -> str:
    """
    Ëá™ÂÆö‰πâÈ°πÁõÆË∑ØÂæÑ

    :param project_path:
    :return:
    """
    if project_path:
        if not isinstance(project_path, str):
            raise typer.BadParameter("ËæìÂÖ•ÈîôËØØÂèÇÊï∞ÔºåÂè™ÂÖÅËÆ∏Â≠óÁ¨¶‰∏≤'")
        else:
            use_project_name = project_path
    else:
        use_project_name = '../fastapi_project'
    return use_project_name


def is_cdn() -> str:
    cdn = typer.confirm('‰Ω†ÊÉ≥‰ΩøÁî® cdn Âêó?', default=False)
    if cdn:
        ending = typer.style('True', fg='green', bold=True)
    else:
        ending = typer.style('False', fg='red', bold=True)
    return ending


def is_async_app() -> str:
    async_app = typer.confirm('‰Ω†ÊÉ≥‰ΩøÁî®ÂºÇÊ≠•Âêó?', default=True)
    if async_app:
        ending = typer.style('True', fg='green', bold=True)
    else:
        ending = typer.style('False', fg='red', bold=True)
    return ending


def is_generic_crud() -> str:
    generic_crud = typer.confirm('‰Ω†ÊÉ≥‰ΩøÁî®Ê≥õÂûã crud Âêó?', default=True)
    if generic_crud:
        ending = typer.style('True', fg='green', bold=True)
    else:
        ending = typer.style('False', fg='red', bold=True)
    return ending


def is_casbin() -> str:
    casbin = typer.confirm('‰Ω†ÊÉ≥‰ΩøÁî® rbac Âêó?', default=True)
    if casbin:
        ending = typer.style('True', fg='green', bold=True)
    else:
        ending = typer.style('False', fg='red', bold=True)
    return ending


@app_zh.command()
def clone(
        orm: Optional[str] = typer.Option(
            None,
            "--orm",
            "-o",
            callback=orm_callback,
            help="""
            ‰ΩøÁî®Âì™‰∏™ ormÔºåÈªòËÆ§‰ΩøÁî® sqlalchemyÔºåÊîØÊåÅ sqlalchemy Êàñ tortoise-ormÔºåËØ¥ÊòéÔºå
            ÂèØ‰ª•‰ΩøÁî®ÁÆÄÂÜôÔºås == sqlalchemyÔºåt == tortoise-orm
            """
        ),
        project_path: Optional[str] = typer.Option(
            None,
            "--project_path",
            "-pp",
            callback=project_path_callback,
            help="""
            ÂÖãÈöÜÂêéÁöÑÈ°πÁõÆË∑ØÂæÑÔºåÈªòËÆ§‰ΩøÁî® ../fastapi_projectÔºåÊîØÊåÅÁªùÂØπË∑ØÂæÑÊàñÁõ∏ÂØπË∑ØÂæÑÔºå‰∏æ‰æãÔºå
            ÁªùÂØπË∑ØÂæÑÔºöD:\\fastapi_projectÔºåÁõ∏ÂØπË∑ØÂæÑÔºö../fastapi_project
            """
        ),
):
    """
    FastAPI È°πÁõÆÂÖãÈöÜÂô®
    """
    path_resolve = project_path if not project_path.startswith("..") else os.path.abspath(project_path)
    path = path_resolve if not path_resolve.startswith(".") else os.path.abspath(project_path)
    path_style = typer.style(path, fg='green', bold=True)
    project_name = re.split(r'/|\'|\\|\\\\', project_path)[-1]
    if 'sqlalchemy' in orm:
        cdn = is_cdn()
        async_app = is_async_app()
        generic_crud = is_generic_crud()
        casbin = None
        if 'True' in generic_crud:
            casbin = is_casbin()
        typer.echo('ÂºÄÂßãÂÖãÈöÜÈ°πÁõÆ üöÄ')
        typer.echo('È°πÁõÆÂêçÁß∞Ôºö' + typer.style(project_name, fg='blue', bold=True))
        typer.echo('ÈÄâÊã© ORMÔºö' + orm)
        typer.echo('‰ΩøÁî® cdnÔºö' + cdn)
        typer.echo('‰ΩøÁî®ÂºÇÊ≠•Ôºö' + async_app)
        typer.echo('‰ΩøÁî®Ê≥õÂûã crudÔºö' + generic_crud)
        if casbin:
            typer.echo('‰ΩøÁî® rbacÔºö' + casbin)
        try:
            if 'True' in cdn:
                src = __sqlalchemy_app_src(
                    host='https://github.com/wu-clan/fastapi_sqlalchemy_mysql.git',
                    async_app=async_app,
                    generic_crud=generic_crud,
                    casbin=casbin
                )
            else:
                src = __sqlalchemy_app_src(
                    host='https://gitee.com/wu_cl/fastapi_sqlalchemy_mysql.git',
                    async_app=async_app,
                    generic_crud=generic_crud,
                    casbin=casbin
                )
            # typer.echo(src)
            # typer.launch(src)
            out = os.system(f'git clone {src} {path}')
            if out != 0:
                raise RuntimeError(out)
        except Exception as e:
            typer.echo(f'ÂÖãÈöÜÈ°πÁõÆÂ§±Ë¥• ‚ùåÔºö{e}')
            raise typer.Exit(code=1)
        else:
            typer.echo('È°πÁõÆÂÖãÈöÜÊàêÂäü ‚úÖ')
            typer.echo(f'ËØ∑Âà∞ÁõÆÂΩï {path_style} Êü•Áúã')
            raise typer.Abort()
    else:
        cdn = is_cdn()
        typer.echo('ÂºÄÂßãÂÖãÈöÜÈ°πÁõÆ üöÄ')
        typer.echo('È°πÁõÆÂêçÁß∞Ôºö' + typer.style(project_name, fg='blue', bold=True))
        typer.echo('ÈÄâÊã© ORMÔºö' + orm)
        typer.echo('‰ΩøÁî® cdnÔºö' + cdn)
        try:
            if 'True' in cdn:
                src = 'https://github.com/wu-clan/fastapi_tortoise_mysql.git'
            else:
                src = 'https://gitee.com/wu_cl/fastapi_tortoise_mysql.git'
            # typer.echo(src)
            # typer.launch(src)
            out = os.system(f'git clone {src} {path}')
            if out != 0:
                raise RuntimeError(out)
        except Exception as e:
            typer.echo(f'ÂÖãÈöÜÈ°πÁõÆÂ§±Ë¥• ‚ùå: {e}')
            raise typer.Exit(code=1)
        else:
            typer.echo('È°πÁõÆÂÖãÈöÜÊàêÂäü ‚úÖ')
            typer.echo(f'ËØ∑Âà∞ÁõÆÂΩï {path_style} Êü•Áúã')
            raise typer.Abort()


def __sqlalchemy_app_src(*, host: str, async_app: str, generic_crud: str, casbin: str) -> str:
    """
    sqlalchemy app‰∏ãËΩΩÂú∞ÂùÄËß£Êûê.

    :param host:
    :param async_app:
    :param generic_crud:
    :param casbin:
    :return:
    """
    if 'True' in async_app:
        tree = ['master', 'async-CRUDBase', 'async-Plus']
    else:
        tree = ['sync', 'sync-CRUDBase', 'sync-Plus']
    if 'True' in generic_crud:
        generic = [tree[1], tree[2]]
        if 'True' in casbin:
            rbac = generic[1]
            clone_branch = f'{rbac} {host}'
        else:
            no_rbac = generic[0]
            clone_branch = f'{no_rbac} {host}'
    else:
        no_generic = tree[0]
        clone_branch = f'{no_generic} {host}'
    return clone_branch
